/*
 * Copyright 2023 zoukang, All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

import java.nio.file.Files

plugins {
    id 'java-gradle-plugin'
    id 'checkstyle'
    id 'pmd'
    id 'maven-publish'
}

repositories {
    mavenLocal()
    mavenCentral()
    gradlePluginPortal()
}

group = "zk.gradle.plugin"
version = "${projectVersion}"

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(17)
    }
}

checkstyle {
    configFile = rootProject.file('qa/checkstyle/checkstyle.xml')
}

pmd {
    consoleOutput = true
    toolVersion = "6.48.0"
    ruleSets = []
    ruleSetFiles = files(rootProject.file('qa/pmd/pmd-java-rules.xml'))
}

gradlePlugin {
    plugins {
        formatterPlugin {
            id = "${group}.java-formatter"
            implementationClass = 'zk.gradle.plugin.formatter.JavaFormatterPlugin'
        }
    }
}

configurations.configureEach {
    resolutionStrategy.cacheDynamicVersionsFor 100, 'days'
}

dependencies {
    implementation 'org.eclipse.jdt:org.eclipse.jdt.core:3.33.0'
    implementation 'org.dom4j:dom4j:2.1.3'
}

def applySelf(String mainClass) {
    def classesDir = project.buildDir.toPath().resolve("classes")
    if (Files.notExists(classesDir)) {
        // 缺少"元"build
        return
    }
    def urls = new ArrayList<URL>()
    for (fc in project.configurations.compileClasspath) {
        urls.add(fc.toURI().toURL())
    }
    urls.add(classesDir.resolve("java").resolve("main").toUri().toURL())

    javax.tools.JavaCompiler

    def classLoaderName = "selfApplyClassLoader"
    def parentClassLoader = this.class.classLoader
    def urlArr = new URL[urls.size()]
    for (i in 0..urls.size() - 1) {
        urlArr[i] = urls.get(i)
    }
    def classloader = new URLClassLoader(classLoaderName, urlArr, parentClassLoader)

    apply plugin: classloader.loadClass(mainClass)

    formatter {
        importOrder = ["java", "javax", "", "#"]
    }

    project.tasks.named("compileJava") {
        dependsOn "fmtCheck"
    }

    project.tasks.named("check") {
        dependsOn "fmtCheck"
    }
}

applySelf("zk.gradle.plugin.formatter.JavaFormatterPlugin")



tasks.named("clean") {
    doLast {
        delete 'qa/format/'
    }
}
